import{_ as x}from"./chunks/appearance-toggle-transition.esn6gqS6.js";import{d as A,s as d,h as B,o as t,c as e,j as s,t as k,e as y,a5 as S,ap as q,a2 as V,F as _,p as P,l as M,_ as I,D as m,I as l,a as r,E as L,aT as c}from"./chunks/framework.BcjNouYM.js";const N=n=>(P("data-v-85e5c8c7"),n=n(),M(),n),H={class:"pro-text-small"},$={class:"pro-text"},U={key:0,class:"iframe-container"},j={key:0,class:"loading"},R=N(()=>s("div",{class:"spinner"},null,-1)),z=[R],O=["src"],J=A({__name:"SupportButton",props:{paymentPlatform:{default:"ko-fi"},paymentType:{default:"donation"},buttonText:{default:"Support me"},iframeUrl:{default:""},paymentName:{default:"SupportMe"},needLogin:{type:Boolean,default:!0},size:{default:"default"}},setup(n){const i=n,p=d(!1),a=d(!0),g=d(null),h=d(""),E=B(()=>i.paymentType.toLowerCase()==="donation"),b=()=>{const o=i.paymentType.toLowerCase();if(o==="donation")f(),p.value=!0;else if(o==="shop"){const T=(window.screen.width-800)/2,w=(window.screen.height-600)/2,D=`width=800,height=600,left=${T},top=${w},resizable=yes,scrollbars=yes,status=yes`;window.open(i.iframeUrl,"ShopPaymentWindow",D)}},f=()=>{h.value=`${i.iframeUrl}${i.iframeUrl.includes("?")?"&":"?"}timestamp=${Date.now()}`,a.value=!0},C=()=>{a.value=!1},F=()=>{a.value=!1},v=()=>{p.value=!1};return(o,u)=>(t(),e(_,null,[i.size==="small"?(t(),e("button",{key:0,class:"pro-button-small",onClick:b},[s("span",H,k(i.buttonText),1)])):(t(),e("button",{key:1,class:"pro-button",onClick:b},[s("span",$,k(i.buttonText),1)])),p.value?(t(),e("div",{key:2,class:"dialog-overlay",onClick:v},[s("div",{class:"dialog-content",onClick:u[0]||(u[0]=V(()=>{},["stop"]))},[s("button",{class:"close-button",onClick:v},"×"),s("h2",null,k(i.buttonText),1),E.value?(t(),e("div",U,[a.value?(t(),e("div",j,z)):y("",!0),S(s("iframe",{id:"kofiframe",ref_key:"iframeRef",ref:g,src:h.value,class:"pro-iframe",onLoad:C,onError:F},null,40,O),[[q,!a.value]])])):y("",!0)])])):y("",!0)],64))}}),G=I(J,[["__scopeId","data-v-85e5c8c7"]]),W=s("h1",{id:"using-vue-in-markdown",tabindex:"-1"},[r("在 Markdown 使用 Vue "),s("a",{class:"header-anchor",href:"#using-vue-in-markdown","aria-label":'Permalink to "在 Markdown 使用 Vue {#using-vue-in-markdown}"'},"​")],-1),K=s("p",null,[s("a",{href:"https://ko-fi.com/s/ce3b2d46c1",target:"_blank"},"点击跳转")],-1),Q=s("img",{src:x,alt:"Appearance Toggle Transition Demo"},null,-1),X=c('<p>在 VitePress 中，每个 Markdown 文件都被编译成 HTML，而且将其作为 <a href="https://cn.vuejs.org/guide/scaling-up/sfc.html" target="_blank" rel="noreferrer">Vue 单文件组件</a>处理。这意味着可以在 Markdown 中使用任何 Vue 功能，包括动态模板、使用 Vue 组件或通过添加 <code>&lt;script&gt;</code> 标签为页面的 Vue 组件添加逻辑。</p><p>值得注意的是，VitePress 利用 Vue 的编译器自动检测和优化 Markdown 内容的纯静态部分。静态内容被优化为单个占位符节点，并从页面的 JavaScript 负载中删除以供初始访问。在客户端激活期间也会跳过它们。简而言之，只需注意任何给定页面上的动态部分。</p><div class="tip custom-block"><p class="custom-block-title">SSR 兼容性</p><p>所有的 Vue 用法都需要兼容 SSR。参见 <a href="./ssr-compat">SSR 兼容性</a>获得更多信息和常见的解决方案。</p></div><h2 id="templating" tabindex="-1">模板化 <a class="header-anchor" href="#templating" aria-label="Permalink to &quot;模板化 {#templating}&quot;">​</a></h2><h3 id="interpolation" tabindex="-1">插值语法 <a class="header-anchor" href="#interpolation" aria-label="Permalink to &quot;插值语法 {#interpolation}&quot;">​</a></h3><p>每个 Markdown 文件首先被编译成 HTML，然后作为 Vue 组件传递给 Vite 流程管道。这意味着可以在文本中使用 Vue 的插值语法：</p><p><strong>输入</strong></p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ 1 + 1 }}</span></span></code></pre></div><p><strong>输出</strong></p><div class="language-text"><pre><code>2</code></pre></div><h3 id="directives" tabindex="-1">指令 <a class="header-anchor" href="#directives" aria-label="Permalink to &quot;指令 {#directives}&quot;">​</a></h3><p>也可以使用指令 (请注意，原始 HTML 在 Markdown 中也有效):</p><p><strong>输入</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i in 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ i }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>输出</strong></p>',15),Y={class:"language-text"},Z=c(`<h2 id="script-and-style" tabindex="-1"><code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> <a class="header-anchor" href="#script-and-style" aria-label="Permalink to &quot;\`&lt;script&gt;\` 和 \`&lt;style&gt;\` {#script-and-style}&quot;">​</a></h2><p>Markdown 文件中的根级 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 标签与 Vue SFC 中的一样，包括 <code>&lt;script setup&gt;</code>、<code>&lt;style module&gt;</code> 等。这里的主要区别是没有 <code>&lt;template&gt;</code> 标签：所有其他根级内容都是 Markdown。另请注意，所有标签都应放在 frontmatter <strong>之后</strong>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hello: world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## Markdown Content</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">The count is: {{ count }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$style.button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count++&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Increment&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">避免在 Markdown 中使用 <code>&lt;style scoped&gt;</code></p><p>在 Markdown 中使用时，<code>&lt;style scoped&gt;</code> 需要为当前页面的每个元素添加特殊属性，这将显著增加页面的大小。当我们需要局部范围的样式时 <code>&lt;style module&gt;</code> 是首选。</p></div><p>还可以访问 VitePress 的运行时 API，例如 <a href="./../reference/runtime-api#usedata"><code>useData</code> 辅助函数</a>，它提供了当前页面的元数据：</p><p><strong>输入</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useData } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ page }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>输出</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/using-vue.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Using Vue in Markdown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;frontmatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {},</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="using-components" tabindex="-1">使用组件 <a class="header-anchor" href="#using-components" aria-label="Permalink to &quot;使用组件 {#using-components}&quot;">​</a></h2><p>可以直接在 Markdown 文件中导入和使用 Vue 组件。</p><h3 id="importing-in-markdown" tabindex="-1">在 Markdown 中导入组件 <a class="header-anchor" href="#importing-in-markdown" aria-label="Permalink to &quot;在 Markdown 中导入组件 {#importing-in-markdown}&quot;">​</a></h3><p>如果一个组件只被几个页面使用，建议在使用它们的地方显式导入它们。这使它们可以正确地进行代码拆分，并且仅在显示相关页面时才加载：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CustomComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../../components/CustomComponent.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># Docs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">This is a .md using a custom component</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">CustomComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## More docs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre></div><h3 id="registering-components-globally" tabindex="-1">注册全局组件 <a class="header-anchor" href="#registering-components-globally" aria-label="Permalink to &quot;注册全局组件 {#registering-components-globally}&quot;">​</a></h3><p>如果一个组件要在大多数页面上使用，可以通过自定义 Vue 实例来全局注册它们。有关示例，请参见<a href="./extending-default-theme#registering-global-components">扩展默认主题</a>中的相关部分。</p><div class="warning custom-block"><p class="custom-block-title">重要</p><p>确保自定义组件的名称包含连字符或采用 PascalCase。否则，它将被视为内联元素并包裹在 <code>&lt;p&gt;</code> 标签内，这将导致激活不匹配，因为 <code>&lt;p&gt;</code> 不允许将块元素放置在其中。</p></div>`,17),ss={id:"using-components-in-headers",tabindex:"-1"},is=s("a",{class:"header-anchor",href:"#using-components-in-headers","aria-label":'Permalink to "在标题中使用组件 <ComponentInHeader /> {#using-components-in-headers}"'},"​",-1),as=c(`<p>可以在标题中使用 Vue 组件，但请注意以下语法之间的区别：</p><table tabindex="0"><thead><tr><th>Markdown</th><th>输出的 HTML</th><th>被解析的标题</th></tr></thead><tbody><tr><td><pre><code> # text &lt;Tag/&gt; </code></pre></td><td><code>&lt;h1&gt;text &lt;Tag/&gt;&lt;/h1&gt;</code></td><td><code>text</code></td></tr><tr><td><pre><code> # text \`&lt;Tag/&gt;\` </code></pre></td><td><code>&lt;h1&gt;text &lt;code&gt;&amp;lt;Tag/&amp;gt;&lt;/code&gt;&lt;/h1&gt;</code></td><td><code>text &lt;Tag/&gt;</code></td></tr></tbody></table><p>被 <code>&lt;code&gt;</code> 包裹的 HTML 将按原样显示，只有未包裹的 HTML 才会被 Vue 解析。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>输出 HTML 由 <a href="https://github.com/Markdown-it/Markdown-it" target="_blank" rel="noreferrer">Markdown-it</a> 完成，而解析的标题由 VitePress 处理 (并用于侧边栏和文档标题)。</p></div><h2 id="escaping" tabindex="-1">转义 <a class="header-anchor" href="#escaping" aria-label="Permalink to &quot;转义 {#escaping}&quot;">​</a></h2><p>可以通过使用 <code>v-pre</code> 指令将它们包裹在 <code>&lt;span&gt;</code> 或其他元素中来转义 Vue 插值：</p><p><strong>输入</strong></p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">This &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ will be displayed as-is }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>输出</strong></p><div class="escape-demo"><p>This <span>{{ will be displayed as-is }}</span></p></div><p>也可以将整个段落包装在 <code>v-pre</code> 自定义容器中：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::: v-pre</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ This will be displayed as-is }}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::</span></span></code></pre></div><p><strong>输出</strong></p><div class="escape-demo"><div><p>{{ This will be displayed as-is }}</p></div></div><h2 id="unescape-in-code-blocks" tabindex="-1">代码块中不转义 <a class="header-anchor" href="#unescape-in-code-blocks" aria-label="Permalink to &quot;代码块中不转义 {#unescape-in-code-blocks}&quot;">​</a></h2><p>默认情况下，代码块是受到保护的，都会自动使用 <code>v-pre</code> 包装，因此内部不会处理任何 Vue 语法。要在代码块内启用 Vue 插值语法，可以在代码语言后附加 <code>-vue</code> 后缀，例如 <code>js-vue</code>：</p><p><strong>输入</strong></p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`js-vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hello {{ 1 + 1 }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span></code></pre></div><p><strong>输出</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hello 2</span></span></code></pre></div><p>请注意，这可能会让某些字符不能正确地进行语法高亮显示。</p><h2 id="using-css-pre-processors" tabindex="-1">使用 CSS 预处理器 <a class="header-anchor" href="#using-css-pre-processors" aria-label="Permalink to &quot;使用 CSS 预处理器 {#using-css-pre-processors}&quot;">​</a></h2><p>VitePress <a href="https://cn.vitejs.dev/guide/features.html#css-pre-processors" target="_blank" rel="noreferrer">内置支持</a> CSS 预处理器：<code>.scss</code>、<code>.sass</code>、.<code>less</code>、<code>.styl</code> 和 <code>.stylus</code> 文件。无需为它们安装 Vite 专用插件，但必须安装相应的预处理器：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># .scss and .sass</span></span>
<span class="line"><span>npm install -D sass</span></span>
<span class="line"><span></span></span>
<span class="line"><span># .less</span></span>
<span class="line"><span>npm install -D less</span></span>
<span class="line"><span></span></span>
<span class="line"><span># .styl and .stylus</span></span>
<span class="line"><span>npm install -D stylus</span></span></code></pre></div><p>然后可以在 Markdown 和主题组件中使用以下内容：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.title</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="using-teleports" tabindex="-1">使用 teleport 传递组件内容 <a class="header-anchor" href="#using-teleports" aria-label="Permalink to &quot;使用 teleport 传递组件内容 {#using-teleports}&quot;">​</a></h2><p>VitePress 目前只有使用 teleport 传送到 body 的 SSG 支持。对于其他地方，可以将它们包裹在内置的 <code>&lt;ClientOnly&gt;</code> 组件中，或者通过 <a href="./../reference/site-config#postrender">postRender 钩子</a>将 teleport 标签注入到最终页面 HTML 中的正确位置。</p>`,28),ts=c(`<details class="details custom-block"><summary>Details</summary></details><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ClientOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Teleport</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#modal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Teleport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ClientOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,2),hs=JSON.parse('{"title":"在 Markdown 使用 Vue","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/using-vue.md","filePath":"zh/guide/using-vue.md","lastUpdated":1733930522000}'),es={name:"zh/guide/using-vue.md"},os=Object.assign(es,{setup(n){return(i,p)=>{const a=m("SupportButton"),g=m("ComponentInHeader"),h=m("ModalDemo");return t(),e("div",null,[W,l(a,{paymentPlatform:"ko-fi",paymentType:"donation",buttonText:"Upgrade to pro",iframeUrl:"https://ko-fi.com/vpadmin/?hidefeed=true&widget=true&embed=true&preview=true",paymentName:"test"}),l(a,{paymentPlatform:"ko-fi",paymentType:"donation",buttonText:"Support me",iframeUrl:"https://ko-fi.com/vpadmin/?hidefeed=true&widget=true&embed=true&preview=true",paymentName:"test",needLogin:!1}),l(G,{paymentPlatform:"ko-fi",paymentType:"donation",buttonText:"Support me",iframeUrl:"https://ko-fi.com/vpadmin/?hidefeed=true&widget=true&embed=true&preview=true",paymentName:"test",needLogin:!1}),K,s("p",null,[Q,r("                     My design    "),l(a,{paymentPlatform:"ko-fi",paymentType:"shop",buttonText:"Buy it",iframeUrl:"https://ko-fi.com/s/ce3b2d46c1",paymentName:"test"})]),X,s("div",Y,[s("pre",null,[s("code",null,[(t(),e(_,null,L(3,E=>s("span",null,k(E)+" ",1)),64))])])]),Z,s("h3",ss,[r("在标题中使用组件 "),l(g),r(),is]),as,l(h),ts])}}});export{hs as __pageData,os as default};
